---
import * as interfaces from '../lib/interfaces.ts'
import {
  getAllPosts,
  getPostBySlug,
  getAllBlocksByBlockId,
} from '../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
} from '../lib/blog-helpers.ts'
import Layout from '../layouts/Layout.astro'
import PostDate from '../components/PostDate.astro'
import PostTitle from '../components/PostTitle.astro'
import PostBody from '../components/PostBody.astro'
import PostRelativeLink from '../components/PostRelativeLink.astro'
import styles from '../styles/blog.module.css'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
])

let ogImage = ''

// Find first image in the blog content for OG preview
const firstImageBlock = blocks.find(block => block.Type === 'image' && block.Image)
if (firstImageBlock && firstImageBlock.Image) {
  let firstImageUrl = ''
  
  if (firstImageBlock.Image.External) {
    firstImageUrl = firstImageBlock.Image.External.Url
    ogImage = firstImageUrl // External images can be used directly
  } else if (firstImageBlock.Image.File) {
    if (import.meta.env.DEV) {
      firstImageUrl = firstImageBlock.Image.File.Url
      ogImage = firstImageUrl // Dev mode uses Notion URLs directly
    } else {
      // Production mode uses local files
      const localPath = filePath(new URL(firstImageBlock.Image.File.Url))
      ogImage = new URL(localPath, Astro.site).toString()
    }
  }
}

// Fallback to featured image if no content image found
if (!ogImage && post.FeaturedImage && post.FeaturedImage.Url) {
  if (import.meta.env.DEV) {
    ogImage = post.FeaturedImage.Url
  } else {
    ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site).toString()
  }
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
  showBackButton={true}
>
  <div slot="main" class={styles.main} id="top">
    <div class={styles.post}>
      <PostTitle post={post} enableLink={false} />
      <PostBody blocks={blocks} />
      <PostDate post={post} />

      <footer>
        <PostRelativeLink />
      </footer>
    </div>
  </div>
</Layout>
